RX INPUT

The receive input side of the fifo wears many hats. First, it must deal with a discontinuous GMII clock that is 1. not synch'd with our internal clock and 2. may exhibit significant (1%) clock differences, which add up to 1 extra bit out of 125 or 72 extra bytes in a jumbo frame. Thus we'll need a FIFO that can deal with that sort of traffic overhead -and- reject a full packet in the case of overflow. 


Somewhat impressively, what I've created there is -so horribly complex- that I can't understand it, and I think I'm just going to start over...


---------------------------------------------------------------------------
GMIIIO.VHD
---------------------------------------------------------------------------
This segment deals with the interface to the GMII subsystem, and runs almost entirely on the RX_CLK clock. 

We register the input RXD, RX_DV and RX_ER signals and then place them into a fifo. The FIFO is actually 16-bits wide, with the lower [7:0] being the registerd DV and the top bits being:
   D[15] : ENDF -- end frame signal. 
   D[14] : ER   -- error during the RX of this frame (from the PHY)
   D[13] : FF   -- error during the RX of this frame because the FIFO was full. 
The input system writes into its FIFO. To signal the end of a frame, it writes one extra word following the data, where D[15] (ENDF) = 1. Should this last word have it's ERF or FIFOWERR bits set, the corresponding errors occurded during the RX of this frame and thus it should be discarded. 

Note that when AIN = AO then the fifo is empty; similary, AIN is incremented following each write, so AIN = 1 when the fifo is storing 1 word (at AIN=0). 

And the ENDF bit is set (and subsequent words for this frame aborted) when any of the above two error conditions are set, to prevent filling up the FIFO with unnecessary junk and to reduce the burden on the output side. 

 
The WEIN signal is ORed after a register, sucht that it stays high for an extra tick following the end of a data write segment. Similarly, the FF and ERIN signals are set-reset registers that are only reset by DVL going low. This guarantees that, following any data write, there will be one extra write. ENDFIN is structured to only be toggled on this last write. 

AL and ALL provide clock-synchronization between the RXCLK and CLK clock domains, and FIFOFULL does the same internally. FIFOfull simply checks to see if AO - 32 - al > 0. 

The post-fifo side was a bit more complex, as we wanted an easy-to-use interface for the other part of the RX_INPUT subsystem. As it is, a high on NEXTF causes the next frame to be clocked out of the FIFO. DOUT, EROUT, ENDFOUT, and OFOUT are valid when VALID is high, and invalid otherwise. It is up to the output system to detect when ENDFOUT is high and that that constitutes an end of frame. 

This makes the interface easy and potentially allows the reading out of data as soon as it becomes available. 

The challenge here was getting LVALID to disable following the reading of the end frame and then _not preventing the next NEXTF from reading subsequent frames_. This is done by having EFV reset NFL and disable LVALID. 


---------------------------------------------------------------------------
RXINPUT.VHD
---------------------------------------------------------------------------

We created FD (Frame Data) to be a signal indicating that the data on DATA is valid frame data, i.e. ENDF is not asserted nor is the data SFD data, -and- the DV line is asserted. This is necessary as any of the BnWR registers can stick for multiple states (due to VALID delays in the GMII system, i.e. there's no data to read out of the FIFO yet). 

Note that the last four bytes of any frame are the FCS (well, at least, they -should be, i.e. if they're not the frame gets trashed anyway). This means that we don't need to worry about extra wait states for the memory write to finish. This also means that the BP will always be one greater than we really want. 

CRCvalid is checked in BPWAIT3 because it has a long propagation delay. 

FD is an anding of RD, DV, and not ENDF. FD is high ==> DATA contains valid in-frame data(not SFD nor ENDF). FD is only high for a single cycle while this data is valid, preventing double-latchings and the like. 

RXInput can be viewed as having four parts:
   * input data latching: the appropriate states of the FSM latch the output of data onto LM. This is latched onto LML once a word, and is written to the memory buffer via MD. 
   * Byte counting: bcnt counts the number of FDs that come in, i.e. the number of bytes. We reset this to -4, because FD-highs end up counting the FCS as well. Resetting to -4 is much faster than having a subtract-by-4 component. 


   * CRC checking: Heavily pipelined CRC checking using previous CRC_combinational code. We reload CRCL withi 0xFFFFFFF to start the CRC; again, each FD-signaled byte is latched, and we eventually check to see if we arrive at the correct value -- this causes the assertion of CRCVALID. 

    * memory address writing: this manages the base pointer. Each new cycle, we load the BP into the MACNT counter, which is eventually written out to MA; thus we sequentially write the frames. Note that we skip over writing the BP and actually write the first valid word at BP+1; the BPWEN mux lets us go back to the BP and write the BCNT value. 
    We only update LPB (thus bpout) -after- the complete, total successful reception of a valid frame. This is the only mechanism we have to commit data to the fifo. 

There is also the address valid part -- this is just a heavily pipelined subsystem that checks if the DESTADDR is of the correct type and if we are accepting frames of that type. RXALLF=1 implies we pass all frames, i.e. promiscuous mode. 

